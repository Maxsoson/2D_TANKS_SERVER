from fastapi import FastAPI, Request, Form, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from pydantic import BaseModel
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import sqlite3

from datetime import datetime

import logging
from http import HTTPStatus

# –ö–ª–∞—Å —Ñ—ñ–ª—å—Ç—Ä—É—î –∑–∞–ø–∏—Å–∏, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å "ConnectionResetError"
class ConnectionResetFilter(logging.Filter):
    def filter(self, record):
        return 'ConnectionResetError' not in record.getMessage()

# –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –¥–æ –ª–æ–≥–µ—Ä–∞ Uvicorn
logging.getLogger("uvicorn.error").addFilter(ConnectionResetFilter())

app = FastAPI()

    # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è SMTP
SMTP_SERVER = "smtp.gmail.com"
PORT = 587
SENDER_EMAIL = "2dtankdiploma@gmail.com"
APP_PASSWORD = "nejgklwyqrtucdzf"  # üîê ‚Üê —Ç–≤—ñ–π app password

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")

# –ú–∞—Ä—à—Ä—É—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
@app.get("/", response_class=RedirectResponse)
async def root():
    return RedirectResponse(url="/index.html")

@app.get("/index.html", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/register.html", response_class=HTMLResponse)
async def register(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})

@app.get("/bug_report.html", response_class=HTMLResponse)
async def bug_report(request: Request):
    return templates.TemplateResponse("bug_report.html", {"request": request})

@app.get("/leaderboard.html", response_class=HTMLResponse)
async def leaderboard(request: Request):
    return templates.TemplateResponse("leaderboard.html", {"request": request})

@app.get("/load_to_game_1.html", response_class=HTMLResponse)
async def load_to_game_1(request: Request):
    return templates.TemplateResponse("load_to_game_1.html", {"request": request})

@app.get("/load_to_game_2.html", response_class=HTMLResponse)
async def load_to_game_2(request: Request):
    return templates.TemplateResponse("load_to_game_2.html", {"request": request})

@app.get("/tanki.html", response_class=HTMLResponse)
async def tanki(request: Request):
    return templates.TemplateResponse("tanki.html", {"request": request})

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_db_connection():
    conn = sqlite3.connect("database/users.db")
    conn.row_factory = sqlite3.Row
    return conn

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
with get_db_connection() as db:
    db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            email TEXT NOT NULL,
            password TEXT NOT NULL
        )
    """)
    db.commit()

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
class UserRegister(BaseModel):
    name: str
    password: str

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@app.post("/register")
async def register_user(request: Request, email: str = Form(...), name: str = Form(...), password: str = Form(...)):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("INSERT INTO users (email, name, password) VALUES (?, ?, ?)", (email, name, password))
        conn.commit()
        return JSONResponse(content={"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π", "status": "success"}, status_code=201)
    #The user is successfully registered
    
    except sqlite3.IntegrityError:
        cursor.execute("SELECT * FROM users WHERE email = ? OR name = ?", (email, name))
        existing_user = cursor.fetchone()

        if existing_user:
            if existing_user["email"] == email and existing_user["name"] == name:
                return JSONResponse(content={"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é —Ç–∞ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–æ–º —É–∂–µ —ñ—Å–Ω—É—î.", "status": "error"}, status_code=400)
            #A user with this email and nickname already exists.
            elif existing_user["email"] == email:
                return JSONResponse(content={"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ü—ñ—î—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.", "status": "error"}, status_code=400)
            #A user with this email already exists.
            elif existing_user["name"] == name:
                return JSONResponse(content={"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º –ø—Å–µ–≤–¥–æ–Ω—ñ–º–æ–º —É–∂–µ —ñ—Å–Ω—É—î.", "status": "error"}, status_code=400)
    #A user with this nickname already exists.
    
    finally:
        conn.close()


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@app.post("/login")
async def login_user(name: str = Form(...), password: str = Form(...)):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE name = ? AND password = ?", (name, password))
    user = cursor.fetchone()
    conn.close()

    if user:
        return JSONResponse(content={
            "message": "Login successful",
            "name": user["name"],
            "email": user["email"]
        })
    else:
        return JSONResponse(content={"message": "Invalid login or password"}, status_code=401)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
@app.post("/recover-password")
async def recover_password(name: str = Form(...), email: str = Form(...)):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE name = ? AND email = ?", (name, email))
    user = cursor.fetchone()
    conn.close()

    if not user:
        return JSONResponse(content={"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."}, status_code=404)

    # üí° –ó–ê–ú–Ü–°–¢–¨ TO_EMAIL ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    message = MIMEMultipart("alternative")
    message["From"] = SENDER_EMAIL
    message["To"] = email  # ‚úÖ ‚Üê –í–ê–ñ–õ–ò–í–û!
    message["Subject"] = "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é"

    html = f"""
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
        body {{
            background-color: #000000;
            font-family: 'Courier New', monospace;
            color: #00FF00;
            padding: 30px;
            margin: 0;
        }}
        .container {{
            max-width: 600px;
            margin: auto;
            border: 2px solid #00FF00;
            border-radius: 8px;
            background-color: #111111;
            padding: 20px;
            font-size: 18px;
            line-height: 1.6;
        }}
        h1 {{
            text-align: center;
            font-size: 32px;
            margin-bottom: 25px;
            color: #00FF00;
        }}
        .optional-image {{
            display: block;
            max-width: 100%;
            height: auto;
            margin: 0 auto 20px;
            border-radius: 8px;
            border: 2px solid #00FF00;
        }}
        .content {{
            color: #d0ffd0;
            font-size: 18px;
        }}
        .password-box {{
            background-color: #000;
            border: 2px dashed #00FF00;
            padding: 16px;
            text-align: center;
            font-size: 22px;
            font-weight: bold;
            border-radius: 5px;
            margin: 20px 0;
            color: #39ff14;
        }}
        .footer {{
            text-align: center;
            font-size: 14px;
            color: #888;
            margin-top: 30px;
        }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîê –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é</h1>

            <!-- –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è -->
            <img src="https://i.ibb.co/ZVJ2yNz/logo.png" alt="Game Logo" class="optional-image">

            <div class="content">
                <p>–ü—Ä–∏–≤—ñ—Ç, {name}!</p>
                <p>–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É:</p>
                <div class="password-box">{user['password']}</div>
                <p>–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–±–µ—Ä–µ–∂—ñ—Ç—å –π–æ–≥–æ –≤ –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ.</p>
            </div>

            <div class="footer">
                <p>–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.</p>
            </div>
        </div>
    </body>
    </html>
    """



    message.attach(MIMEText(html, "html"))

    try:
        with smtplib.SMTP(SMTP_SERVER, PORT) as server:
            server.starttls()  # üõ°Ô∏è –ù–µ –∑–∞–±—É–¥—å!
            server.login(SENDER_EMAIL, APP_PASSWORD)  #‚úÖ
            server.sendmail(SENDER_EMAIL, email, message.as_string())  # ‚úÖ ‚Üê –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        return JSONResponse(content={"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ."})
    except Exception as e:
        return JSONResponse(content={"message": f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {str(e)}"}, status_code=500)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–æ—Ä–º–∏ bug_report
@app.post("/send-bug-report")
async def send_bug_report(
    name: str = Form(...),
    email: str = Form(...),
    subject: str = Form(...),
    msg: str = Form(...)
):
    message = MIMEMultipart('alternative')
    message['From'] = SENDER_EMAIL
    message['To'] = SENDER_EMAIL  # üì© –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É
    message['Subject'] = f'Bug Report: {subject}'

    html = f"""
    <html>
    <body style="background-color: #000000; font-family: 'Courier New', monospace; color: #00FF00; padding: 30px;">
        <div style="max-width: 600px; margin: auto; border: 2px solid #00FF00; border-radius: 8px; padding: 20px; background-color: #111111; font-size: 18px; line-height: 1.6;">

        <h1 style="text-align: center; font-size: 32px; margin-bottom: 25px; color: #00FF00;">üõ† BUG REPORT</h1>

        <div style="margin-bottom: 20px;">
            <p style="margin: 0; color: #39ff14; font-size: 20px;"><strong>Name:</strong></p>
            <div style="border: 2px solid #00FF00; padding: 12px; border-radius: 4px; background-color: #000; color: #d0ffd0; font-size: 18px;">
            {name}
            </div>
        </div>

        <div style="margin-bottom: 20px;">
            <p style="margin: 0; color: #39ff14; font-size: 20px;"><strong>Email:</strong></p>
            <div style="border: 2px solid #00FF00; padding: 12px; border-radius: 4px; background-color: #000; color: #d0ffd0; font-size: 18px;">
            {email}
            </div>
        </div>

        <div style="margin-bottom: 20px;">
            <p style="margin: 0; color: #39ff14; font-size: 20px;"><strong>Subject:</strong></p>
            <div style="border: 2px solid #00FF00; padding: 12px; border-radius: 4px; background-color: #000; color: #d0ffd0; font-size: 18px;">
            {subject}
            </div>
        </div>

        <div>
            <p style="margin: 0; color: #39ff14; font-size: 20px;"><strong>Message:</strong></p>
            <div style="background-color: #222; border: 2px dashed #00FF00; padding: 16px; border-radius: 4px; white-space: pre-wrap; color: #d0ffd0; font-size: 18px;">
            {msg}
            </div>
        </div>

        <div style="margin-top: 30px;">
            <p style="margin: 0; color: #39ff14; font-size: 20px;"><strong>Report Timestamp:</strong></p>
            <div style="border: 2px solid #00FF00; padding: 12px; border-radius: 4px; background-color: #000; color: #d0ffd0; font-size: 18px;">
            {now}
            </div>
        </div>

        <p style="margin-top: 35px; font-size: 14px; text-align: center; color: #888;">This message was auto-generated by Pixel Tanks Battlefront</p>
        </div>
    </body>
    </html>
    """


    message.attach(MIMEText(html, "html"))

    try:
        with smtplib.SMTP(SMTP_SERVER, PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, APP_PASSWORD)
            server.sendmail(SENDER_EMAIL, SENDER_EMAIL, message.as_string())
        return {"message": "Bug report sent successfully"}
    
    except Exception as e:
        return {"error": str(e)}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)